{
  "groups": [
    {
      "field_ctrl_points": "",
      "field_dim": 1,
      "interpolation": "const float lobatto_pts[4] = float[](0, 0.276393202, 0.723606798, 1);\nconst float w[4] = float[](-5, 11.1803398, -11.1803398, 5);\nconst int dof_map[64] = int[](\n    0, 8, 9, 1, 14, 34, 35, 10, 15, 32, 33, 11, 3, \n    12, 13, 2, 24, 36, 37, 26, 49, 56, 57, 40, 48, \n    58, 59, 41, 30, 45, 44, 28, 25, 38, 39, 27, 51, \n    60, 61, 42, 50, 62, 63, 43, 31, 47, 46, 29, 4, \n    16, 17, 5, 22, 52, 53, 18, 23, 54, 55, 19, 7, \n    20, 21, 6);\n void poly1d(in float y, out float u[4]){            \n     int i = 3;                                       \n     int k = 3;                                       \n     float lk = 1.;                                        \n     for (k = 0; k < 3; k++){                         \n         if (y >= (lobatto_pts[k] + lobatto_pts[k+1])/2){  \n             lk *= y - lobatto_pts[k];                     \n         } else {                                          \n             for (i = k+1; i <= 3; i++) {             \n                 lk *= y - lobatto_pts[i];                 \n             }                                             \n             break;                                        \n         }                                                 \n     }                                                     \n     float l = lk * (y - lobatto_pts[k]);                  \n     for (i = 0; i < k; i++) {                             \n         u[i] = l * w[i] / (y - lobatto_pts[i]);           \n     }                                                     \n     u[k] = lk * w[k];                                     \n     for (i++; i <= 3; i++) {                         \n         u[i] = l * w[i] / (y - lobatto_pts[i]);           \n     }                                                     \n };                                                        \n\nfloat element_interpolation(in vec3 ref_pos, in float values[64]){ \n float shape_x[3+1];                                                      \n float shape_y[3+1];                                                      \n float shape_z[3+1];                                                      \n poly1d(ref_pos.x, shape_x);                                                   \n poly1d(ref_pos.y, shape_y);                                                   \n poly1d(ref_pos.z, shape_z);                                                   \n float result = 0.;                                           \n int n = 0;                                                                    \n for (int k = 0; k <= 3; k++){                                            \n     for (int j = 0; j <= 3; j++){                                        \n         for (int i = 0; i <= 3; i++){                                    \n             result += shape_x[i]*shape_y[j]*shape_z[k]*values[dof_map[n]];    \n             n += 1;                                                           \n         }                                                                     \n     }                                                                         \n }                                                                             \n    return result;\n}\n",
      "mapping": "const float lobatto_pts[2] = float[](0, 1);\nconst float w[2] = float[](-1, 1);\nconst int dof_map[8] = int[](\n    0, 1, 3, 2, 4, 5, 7, 6 );\n void poly1d(in float y, out float u[2]){            \n     int i = 1;                                       \n     int k = 1;                                       \n     float lk = 1.;                                        \n     for (k = 0; k < 1; k++){                         \n         if (y >= (lobatto_pts[k] + lobatto_pts[k+1])/2){  \n             lk *= y - lobatto_pts[k];                     \n         } else {                                          \n             for (i = k+1; i <= 1; i++) {             \n                 lk *= y - lobatto_pts[i];                 \n             }                                             \n             break;                                        \n         }                                                 \n     }                                                     \n     float l = lk * (y - lobatto_pts[k]);                  \n     for (i = 0; i < k; i++) {                             \n         u[i] = l * w[i] / (y - lobatto_pts[i]);           \n     }                                                     \n     u[k] = lk * w[k];                                     \n     for (i++; i <= 1; i++) {                         \n         u[i] = l * w[i] / (y - lobatto_pts[i]);           \n     }                                                     \n };                                                        \n\nvec3 element_mapping(in vec3 ref_pos, in vec3 values[8]){ \n float shape_x[1+1];                                                      \n float shape_y[1+1];                                                      \n float shape_z[1+1];                                                      \n poly1d(ref_pos.x, shape_x);                                                   \n poly1d(ref_pos.y, shape_y);                                                   \n poly1d(ref_pos.z, shape_z);                                                   \n vec3 result = vec3(0.,0.,0.);                                           \n int n = 0;                                                                    \n for (int k = 0; k <= 1; k++){                                            \n     for (int j = 0; j <= 1; j++){                                        \n         for (int i = 0; i <= 1; i++){                                    \n             result += shape_x[i]*shape_y[j]*shape_z[k]*values[dof_map[n]];    \n             n += 1;                                                           \n         }                                                                     \n     }                                                                         \n }                                                                             \n    return result;\n}\n",
      "mesh_ctrl_points": "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",
      "mesh_dim": 3,
      "nb_field_cp_per_cell": 64,
      "nb_mesh_cp_per_cell": 8,
      "primitive": "HEX"
    }
  ],
  "largest_edge": 0.367578130309734,
  "nb_conforming_dofs": 1000,
  "version": "0.1"
}