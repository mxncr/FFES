{
  "groups": [
    {
      "field_ctrl_points": "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",
      "field_dim": 1,
      "interpolation": "const float lobatto_pts[3] = float[](0, 0.5, 1);\nconst float w[3] = float[](2, -4, 2);\nconst int dof_map[27] = int[](\n    0, 8, 1, 11, 20, 9, 3, 10, 2, 16, 21, 17, 24, \n    26, 22, 19, 23, 18, 4, 12, 5, 15, 25, 13, 7, \n    14, 6);\n void poly1d(in float y, out float u[3]){            \n     int i = 2;                                       \n     int k = 2;                                       \n     float lk = 1.;                                        \n     for (k = 0; k < 2; k++){                         \n         if (y >= (lobatto_pts[k] + lobatto_pts[k+1])/2){  \n             lk *= y - lobatto_pts[k];                     \n         } else {                                          \n             for (i = k+1; i <= 2; i++) {             \n                 lk *= y - lobatto_pts[i];                 \n             }                                             \n             break;                                        \n         }                                                 \n     }                                                     \n     float l = lk * (y - lobatto_pts[k]);                  \n     for (i = 0; i < k; i++) {                             \n         u[i] = l * w[i] / (y - lobatto_pts[i]);           \n     }                                                     \n     u[k] = lk * w[k];                                     \n     for (i++; i <= 2; i++) {                         \n         u[i] = l * w[i] / (y - lobatto_pts[i]);           \n     }                                                     \n };                                                        \n\nfloat element_interpolation(in vec3 ref_pos, in float values[27]){ \n float shape_x[2+1];                                                      \n float shape_y[2+1];                                                      \n float shape_z[2+1];                                                      \n poly1d(ref_pos.x, shape_x);                                                   \n poly1d(ref_pos.y, shape_y);                                                   \n poly1d(ref_pos.z, shape_z);                                                   \n float result = 0.;                                           \n int n = 0;                                                                    \n for (int k = 0; k <= 2; k++){                                            \n     for (int j = 0; j <= 2; j++){                                        \n         for (int i = 0; i <= 2; i++){                                    \n             result += shape_x[i]*shape_y[j]*shape_z[k]*values[dof_map[n]];    \n             n += 1;                                                           \n         }                                                                     \n     }                                                                         \n }                                                                             \n    return result;\n}\n",
      "mapping": "const float lobatto_pts[2] = float[](0, 1);\nconst float w[2] = float[](-1, 1);\nconst int dof_map[8] = int[](\n    0, 1, 3, 2, 4, 5, 7, 6 );\n void poly1d(in float y, out float u[2]){            \n     int i = 1;                                       \n     int k = 1;                                       \n     float lk = 1.;                                        \n     for (k = 0; k < 1; k++){                         \n         if (y >= (lobatto_pts[k] + lobatto_pts[k+1])/2){  \n             lk *= y - lobatto_pts[k];                     \n         } else {                                          \n             for (i = k+1; i <= 1; i++) {             \n                 lk *= y - lobatto_pts[i];                 \n             }                                             \n             break;                                        \n         }                                                 \n     }                                                     \n     float l = lk * (y - lobatto_pts[k]);                  \n     for (i = 0; i < k; i++) {                             \n         u[i] = l * w[i] / (y - lobatto_pts[i]);           \n     }                                                     \n     u[k] = lk * w[k];                                     \n     for (i++; i <= 1; i++) {                         \n         u[i] = l * w[i] / (y - lobatto_pts[i]);           \n     }                                                     \n };                                                        \n\nvec3 element_mapping(in vec3 ref_pos, in vec3 values[8]){ \n float shape_x[1+1];                                                      \n float shape_y[1+1];                                                      \n float shape_z[1+1];                                                      \n poly1d(ref_pos.x, shape_x);                                                   \n poly1d(ref_pos.y, shape_y);                                                   \n poly1d(ref_pos.z, shape_z);                                                   \n vec3 result = vec3(0.,0.,0.);                                           \n int n = 0;                                                                    \n for (int k = 0; k <= 1; k++){                                            \n     for (int j = 0; j <= 1; j++){                                        \n         for (int i = 0; i <= 1; i++){                                    \n             result += shape_x[i]*shape_y[j]*shape_z[k]*values[dof_map[n]];    \n             n += 1;                                                           \n         }                                                                     \n     }                                                                         \n }                                                                             \n    return result;\n}\n",
      "mesh_ctrl_points": "AAAAAAAAAAAAAAAAn6qqPgAAAAAAAAAAn6qqPp+qqj4AAAAAAAAAAJ+qqj4AAAAAAAAAAAAAAACfqqo+n6qqPgAAAACfqqo+RxyyPhhbqD533LA+AAAAAJ+qqj6fqqo+n6qqPgAAAAAAAAAAsKoqPwAAAAAAAAAAsKoqP5+qqj4AAAAAn6qqPp+qqj4AAAAAn6qqPgAAAACfqqo+sKoqPwAAAACfqqo+L90oPzuJsD7VzaU+RxyyPhhbqD533LA+sKoqPwAAAAAAAAAAAACAPwAAAAAAAAAAAACAP5+qqj4AAAAAsKoqP5+qqj4AAAAAsKoqPwAAAACfqqo+AACAPwAAAACfqqo+AACAP5+qqj6fqqo+L90oPzuJsD7VzaU+AAAAAJ+qqj4AAAAAn6qqPp+qqj4AAAAAn6qqPrCqKj8AAAAAAAAAALCqKj8AAAAAAAAAAJ+qqj6fqqo+RxyyPhhbqD533LA+SrWnPi3QKj/aj7Q+AAAAALCqKj+fqqo+n6qqPp+qqj4AAAAAsKoqP5+qqj4AAAAAsKoqP7CqKj8AAAAAn6qqPrCqKj8AAAAARxyyPhhbqD533LA+L90oPzuJsD7VzaU+4L4mP0HWKz88FaA+SrWnPi3QKj/aj7Q+sKoqP5+qqj4AAAAAAACAP5+qqj4AAAAAAACAP7CqKj8AAAAAsKoqP7CqKj8AAAAAL90oPzuJsD7VzaU+AACAP5+qqj6fqqo+AACAP7CqKj+fqqo+4L4mP0HWKz88FaA+AAAAALCqKj8AAAAAn6qqPrCqKj8AAAAAn6qqPgAAgD8AAAAAAAAAAAAAgD8AAAAAAAAAALCqKj+fqqo+SrWnPi3QKj/aj7Q+n6qqPgAAgD+fqqo+AAAAAAAAgD+fqqo+n6qqPrCqKj8AAAAAsKoqP7CqKj8AAAAAsKoqPwAAgD8AAAAAn6qqPgAAgD8AAAAASrWnPi3QKj/aj7Q+4L4mP0HWKz88FaA+sKoqPwAAgD+fqqo+n6qqPgAAgD+fqqo+sKoqP7CqKj8AAAAAAACAP7CqKj8AAAAAAACAPwAAgD8AAAAAsKoqPwAAgD8AAAAA4L4mP0HWKz88FaA+AACAP7CqKj+fqqo+AACAPwAAgD+fqqo+sKoqPwAAgD+fqqo+AAAAAAAAAACfqqo+n6qqPgAAAACfqqo+RxyyPhhbqD533LA+AAAAAJ+qqj6fqqo+AAAAAAAAAACwqio/n6qqPgAAAACwqio/cjKxPpOssz6SWyc/AAAAAJ+qqj6wqio/n6qqPgAAAACfqqo+sKoqPwAAAACfqqo+L90oPzuJsD7VzaU+RxyyPhhbqD533LA+n6qqPgAAAACwqio/sKoqPwAAAACwqio/0UErPwIsqj6YEyw/cjKxPpOssz6SWyc/sKoqPwAAAACfqqo+AACAPwAAAACfqqo+AACAP5+qqj6fqqo+L90oPzuJsD7VzaU+sKoqPwAAAACwqio/AACAPwAAAACwqio/AACAP5+qqj6wqio/0UErPwIsqj6YEyw/AAAAAJ+qqj6fqqo+RxyyPhhbqD533LA+SrWnPi3QKj/aj7Q+AAAAALCqKj+fqqo+AAAAAJ+qqj6wqio/cjKxPpOssz6SWyc/AMazPswmLD9BCy0/AAAAALCqKj+wqio/RxyyPhhbqD533LA+L90oPzuJsD7VzaU+4L4mP0HWKz88FaA+SrWnPi3QKj/aj7Q+cjKxPpOssz6SWyc/0UErPwIsqj6YEyw/lNonP56yJj+X/i0/AMazPswmLD9BCy0/L90oPzuJsD7VzaU+AACAP5+qqj6fqqo+AACAP7CqKj+fqqo+4L4mP0HWKz88FaA+0UErPwIsqj6YEyw/AACAP5+qqj6wqio/AACAP7CqKj+wqio/lNonP56yJj+X/i0/AAAAALCqKj+fqqo+SrWnPi3QKj/aj7Q+n6qqPgAAgD+fqqo+AAAAAAAAgD+fqqo+AAAAALCqKj+wqio/AMazPswmLD9BCy0/n6qqPgAAgD+wqio/AAAAAAAAgD+wqio/SrWnPi3QKj/aj7Q+4L4mP0HWKz88FaA+sKoqPwAAgD+fqqo+n6qqPgAAgD+fqqo+AMazPswmLD9BCy0/lNonP56yJj+X/i0/sKoqPwAAgD+wqio/n6qqPgAAgD+wqio/4L4mP0HWKz88FaA+AACAP7CqKj+fqqo+AACAPwAAgD+fqqo+sKoqPwAAgD+fqqo+lNonP56yJj+X/i0/AACAP7CqKj+wqio/AACAPwAAgD+wqio/sKoqPwAAgD+wqio/AAAAAAAAAACwqio/n6qqPgAAAACwqio/cjKxPpOssz6SWyc/AAAAAJ+qqj6wqio/AAAAAAAAAAAAAIA/n6qqPgAAAAAAAIA/n6qqPp+qqj4AAIA/AAAAAJ+qqj4AAIA/n6qqPgAAAACwqio/sKoqPwAAAACwqio/0UErPwIsqj6YEyw/cjKxPpOssz6SWyc/n6qqPgAAAAAAAIA/sKoqPwAAAAAAAIA/sKoqP5+qqj4AAIA/n6qqPp+qqj4AAIA/sKoqPwAAAACwqio/AACAPwAAAACwqio/AACAP5+qqj6wqio/0UErPwIsqj6YEyw/sKoqPwAAAAAAAIA/AACAPwAAAAAAAIA/AACAP5+qqj4AAIA/sKoqP5+qqj4AAIA/AAAAAJ+qqj6wqio/cjKxPpOssz6SWyc/AMazPswmLD9BCy0/AAAAALCqKj+wqio/AAAAAJ+qqj4AAIA/n6qqPp+qqj4AAIA/n6qqPrCqKj8AAIA/AAAAALCqKj8AAIA/cjKxPpOssz6SWyc/0UErPwIsqj6YEyw/lNonP56yJj+X/i0/AMazPswmLD9BCy0/n6qqPp+qqj4AAIA/sKoqP5+qqj4AAIA/sKoqP7CqKj8AAIA/n6qqPrCqKj8AAIA/0UErPwIsqj6YEyw/AACAP5+qqj6wqio/AACAP7CqKj+wqio/lNonP56yJj+X/i0/sKoqP5+qqj4AAIA/AACAP5+qqj4AAIA/AACAP7CqKj8AAIA/sKoqP7CqKj8AAIA/AAAAALCqKj+wqio/AMazPswmLD9BCy0/n6qqPgAAgD+wqio/AAAAAAAAgD+wqio/AAAAALCqKj8AAIA/n6qqPrCqKj8AAIA/n6qqPgAAgD8AAIA/AAAAAAAAgD8AAIA/AMazPswmLD9BCy0/lNonP56yJj+X/i0/sKoqPwAAgD+wqio/n6qqPgAAgD+wqio/n6qqPrCqKj8AAIA/sKoqP7CqKj8AAIA/sKoqPwAAgD8AAIA/n6qqPgAAgD8AAIA/lNonP56yJj+X/i0/AACAP7CqKj+wqio/AACAPwAAgD+wqio/sKoqPwAAgD+wqio/sKoqP7CqKj8AAIA/AACAP7CqKj8AAIA/AACAPwAAgD8AAIA/sKoqPwAAgD8AAIA/",
      "mesh_dim": 3,
      "nb_field_cp_per_cell": 27,
      "nb_mesh_cp_per_cell": 8,
      "primitive": "HEX"
    }
  ],
  "largest_edge": 0.367578130309734,
  "nb_conforming_dofs": 343,
  "version": "0.1"
}